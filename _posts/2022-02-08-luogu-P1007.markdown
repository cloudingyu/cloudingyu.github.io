---
layout:     post
title:      "[洛谷]P1007 独木桥"
subtitle:   "贪心模拟，看上去很复杂，实际上很简单"
date:       2022-02-08
author:     "CloudingYu"
header-style: picture
mathjax: true
tags:
    - 题解
    - 洛谷
---
## [题目描述](https://www.luogu.com.cn/problem/P1007)

战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳 $1$ 个人通过。假如有 $2$ 个人相向而行在桥上相遇，那么他们 $2$ 个人将无法绕过对方，只能有 $1$ 个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。

  
  

突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为 $L$ ，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为 $1$ ，但一个士兵某一时刻来到了坐标为 $0$ 或 $L+1$ 的位置，他就离开了独木桥。

  
  

每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己改变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。

  
  

由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。

  

## 模型简化

题目是不是看上去很复杂？我们先来简化一下：

  

### I.

想象一下，两个士兵在独木桥上相遇，他们分别转身行走，远远看去，是不是就像互相穿过了对方？

![相向而行](/img/posts/2022-02-08-luogu-P1007/1.png)

![背道而驰](/img/posts/2022-02-08-luogu-P1007/2.png)

  

因此，每个士兵的行动轨迹都可被视为不受其他因素影响，只与其开始时的方向有关。

  

### II.

若一个士兵的位置为x，那么他下桥的两种可能时间为 $x$ 和 $L-x+1$ （这里注意 $+1/-1$ 的细节），所以其下桥的最长时间和最短时间分别为 $\max( x , L-x+1 )$ 和 $\min( x , L-x+1 )$ 。

  
  

## 解决思路

根据贪心策略，总共需要的撤退时间就等于最后一个下桥士兵所用的时间。

  

所以，总共需要撤退时间的最大值，就等于所有士兵下桥时间较大值中的最大值，即：

<p style="text-align: center;">$\displaystyle\max ( \max( x_1 , L-x_1+1 ) , ... , \max( x_n , L-x_n+1 ) )$</p>


同理，总共需要撤退时间的最小值，就等于所有士兵下桥时间较小值中的最大值，即：

<p style="text-align: center;">$\displaystyle\max ( \min( x_1 , L-x_1+1 ) ,  ... , min( x_n , L-x_n+1 ) )$</p>

  
  

## 代码实现看这里

  

```

#include <iostream>
using namespace std;
int n, l, x, maxn = 0, minn = 0;
int main()
{
    cin >> l >> n; // 读入独木桥长度和士兵数量
    for (int i = 1; i <= n; i++)
    {
        cin >> x; // 读入士兵位置
        maxn = max(maxn, max(x, l - x + 1)); // 不断更新时间最大值（这里不明白的看“整体思路”）
        minn = max(minn, min(x, l - x + 1)); // 不断更新时间最小值
    }
    cout << minn << " " << maxn << endl; // 输出结果
    return 0;
}
```